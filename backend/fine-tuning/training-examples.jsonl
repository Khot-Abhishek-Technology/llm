{"prompt": "Generate an aptitude quiz with 10 questions on logical reasoning. Return ONLY valid JSON array.", "completion": "[{\"id\":\"q1_logic\",\"que\":\"If all Bloops are Razzies and all Razzies are Lazzies, then all Bloops are definitely Lazzies?\",\"a\":\"True\",\"b\":\"False\",\"c\":\"Cannot be determined\",\"d\":\"None of the above\",\"ans\":\"a\"},{\"id\":\"q2_logic\",\"que\":\"Which number should come next in the series: 1, 4, 9, 16, 25, ?\",\"a\":\"30\",\"b\":\"36\",\"c\":\"49\",\"d\":\"64\",\"ans\":\"b\"}]"}
{"prompt": "Generate 2 technical DSA problems on arrays. Return ONLY valid JSON array.", "completion": "[{\"id\":\"two_sum\",\"title\":\"Two Sum\",\"desc\":\"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\\n\\nInput Format: An array of integers and a target integer\\nOutput Format: Array of two indices\\n\\nExample:\\nInput: nums = [2,7,11,15], target = 9\\nOutput: [0,1]\\n\\nConstraints: 2 <= nums.length <= 10^4\",\"testCases\":[{\"input\":\"[2,7,11,15], 9\",\"expectedOutput\":\"[0,1]\"},{\"input\":\"[3,2,4], 6\",\"expectedOutput\":\"[1,2]\"}]},{\"id\":\"max_subarray\",\"title\":\"Maximum Subarray\",\"desc\":\"Find the contiguous subarray within an array which has the largest sum.\\n\\nInput Format: An array of integers\\nOutput Format: Integer representing the maximum sum\\n\\nExample:\\nInput: [-2,1,-3,4,-1,2,1,-5,4]\\nOutput: 6\\nExplanation: [4,-1,2,1] has the largest sum = 6\\n\\nConstraints: 1 <= nums.length <= 10^5\",\"testCases\":[{\"input\":\"[-2,1,-3,4,-1,2,1,-5,4]\",\"expectedOutput\":\"6\"},{\"input\":\"[1]\",\"expectedOutput\":\"1\"}]}]"}
{"prompt": "Analyze this code solution and return evaluation JSON: Problem: Two Sum, Code: function twoSum(nums, target) { for(let i=0; i<nums.length; i++) { for(let j=i+1; j<nums.length; j++) { if(nums[i] + nums[j] === target) return [i,j]; } } }", "completion": "{\"evaluation\":{\"success\":true,\"summary\":\"Correct brute force solution with O(n^2) time complexity. Works but not optimal.\"},\"analysis\":{\"time_complexity_big_o\":\"O(n^2)\",\"space_complexity_big_o\":\"O(1)\",\"primary_data_structures\":[\"array\"],\"secondary_data_structures\":[],\"algorithm_strategy\":\"nested loops\",\"algorithm_category\":\"array\",\"difficulty\":\"easy\",\"patterns\":[\"brute force\"],\"edge_cases_covered\":[\"basic cases\"],\"bug_types\":[],\"potential_improvements\":[\"Use hash map for O(n) solution\",\"Single pass optimization possible\"],\"coding_style_issues\":[],\"test_case_coverage\":{\"basic\":true,\"edge\":false,\"stress\":false},\"misuse_of_data_structure\":false,\"notes\":\"Solution is correct but can be optimized using hash map approach\"}}"}
{"prompt": "Generate 5 personalized aptitude questions for a student with 45% average performance, weak in logical reasoning. Return ONLY valid JSON array.", "completion": "[{\"question\":\"If A is taller than B, and B is taller than C, who is the shortest?\",\"options\":{\"a\":\"A\",\"b\":\"B\",\"c\":\"C\",\"d\":\"Cannot determine\"},\"correctAnswer\":\"c\",\"explanation\":\"This is a basic transitive relation. If A > B and B > C, then A > B > C, making C the shortest. This tests fundamental logical reasoning.\",\"difficulty\":\"easy\",\"topic\":\"Logical Reasoning - Relations\",\"youtubeLink\":\"https://www.youtube.com/watch?v=example\"},{\"question\":\"Complete the pattern: 2, 4, 6, 8, ?\",\"options\":{\"a\":\"9\",\"b\":\"10\",\"c\":\"11\",\"d\":\"12\"},\"correctAnswer\":\"b\",\"explanation\":\"This is an arithmetic sequence with a common difference of 2. Each number increases by 2, so 8 + 2 = 10.\",\"difficulty\":\"easy\",\"topic\":\"Pattern Recognition\",\"youtubeLink\":\"https://www.youtube.com/watch?v=example\"}]"}
{"prompt": "Generate an aptitude quiz with 3 questions on problem solving. Return ONLY valid JSON array.", "completion": "[{\"id\":\"prob1\",\"que\":\"A train travels 60 km in 45 minutes. What is its speed in km/h?\",\"a\":\"60\",\"b\":\"70\",\"c\":\"80\",\"d\":\"90\",\"ans\":\"c\"},{\"id\":\"prob2\",\"que\":\"If 5 workers can complete a task in 10 days, how many days will 10 workers take?\",\"a\":\"5\",\"b\":\"10\",\"c\":\"15\",\"d\":\"20\",\"ans\":\"a\"},{\"id\":\"prob3\",\"que\":\"A person buys an item for $100 and sells it for $120. What is the profit percentage?\",\"a\":\"10%\",\"b\":\"15%\",\"c\":\"20%\",\"d\":\"25%\",\"ans\":\"c\"}]"}
{"prompt": "Generate 1 technical DSA problem on binary trees. Return ONLY valid JSON array.", "completion": "[{\"id\":\"max_depth_tree\",\"title\":\"Maximum Depth of Binary Tree\",\"desc\":\"Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\\n\\nInput Format: Root node of a binary tree\\nOutput Format: Integer representing maximum depth\\n\\nExample:\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: 3\\nExplanation: The longest path is 3->20->7 or 3->20->15\\n\\nConstraints:\\nThe number of nodes in the tree is in the range [0, 10^4]\\n-100 <= Node.val <= 100\",\"testCases\":[{\"input\":\"[3,9,20,null,null,15,7]\",\"expectedOutput\":\"3\"},{\"input\":\"[1,null,2]\",\"expectedOutput\":\"2\"}]}]"}
{"prompt": "Analyze this sorting code: function bubbleSort(arr) { for(let i=0; i<arr.length; i++) { for(let j=0; j<arr.length-i-1; j++) { if(arr[j]>arr[j+1]) { let temp=arr[j]; arr[j]=arr[j+1]; arr[j+1]=temp; } } } return arr; } Return evaluation JSON.", "completion": "{\"evaluation\":{\"success\":true,\"summary\":\"Correct bubble sort implementation with standard O(n^2) time complexity.\"},\"analysis\":{\"time_complexity_big_o\":\"O(n^2)\",\"space_complexity_big_o\":\"O(1)\",\"primary_data_structures\":[\"array\"],\"secondary_data_structures\":[],\"algorithm_strategy\":\"bubble sort\",\"algorithm_category\":\"sorting\",\"difficulty\":\"easy\",\"patterns\":[\"comparison sort\",\"in-place sorting\"],\"edge_cases_covered\":[\"basic sorting\"],\"bug_types\":[],\"potential_improvements\":[\"Add early termination flag\",\"Consider more efficient algorithms for large datasets\"],\"coding_style_issues\":[],\"test_case_coverage\":{\"basic\":true,\"edge\":false,\"stress\":false},\"misuse_of_data_structure\":false,\"notes\":\"Classic bubble sort implementation. Consider quicksort or mergesort for better performance.\"}}"}
{"prompt": "Generate an aptitude quiz with 2 questions on critical thinking. Return ONLY valid JSON array.", "completion": "[{\"id\":\"crit1\",\"que\":\"Which of the following assumptions is necessary for the argument: 'All students passed because they studied hard'?\",\"a\":\"Studying guarantees passing\",\"b\":\"Some students didn't study\",\"c\":\"Hard work is difficult\",\"d\":\"Exams were easy\",\"ans\":\"a\"},{\"id\":\"crit2\",\"que\":\"If it rains, the ground gets wet. The ground is wet. What can we conclude?\",\"a\":\"It rained\",\"b\":\"It might have rained\",\"c\":\"It didn't rain\",\"d\":\"None of the above\",\"ans\":\"b\"}]"}
{"prompt": "Generate 1 technical DSA problem on linked lists. Return ONLY valid JSON array.", "completion": "[{\"id\":\"reverse_linked_list\",\"title\":\"Reverse Linked List\",\"desc\":\"Given the head of a singly linked list, reverse the list, and return the reversed list.\\n\\nInput Format: Head of a singly linked list\\nOutput Format: Head of the reversed linked list\\n\\nExample:\\nInput: head = [1,2,3,4,5]\\nOutput: [5,4,3,2,1]\\n\\nConstraints:\\nThe number of nodes in the list is the range [0, 5000]\\n-5000 <= Node.val <= 5000\\n\\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?\",\"testCases\":[{\"input\":\"[1,2,3,4,5]\",\"expectedOutput\":\"[5,4,3,2,1]\"},{\"input\":\"[1,2]\",\"expectedOutput\":\"[2,1]\"}]}]"}
{"prompt": "Generate 3 personalized questions for advanced student (85% average), strong in algorithms, weak in dynamic programming. Return ONLY valid JSON array.", "completion": "[{\"question\":\"What is the time complexity of the optimal solution for the Longest Common Subsequence (LCS) problem using dynamic programming?\",\"options\":{\"a\":\"O(n)\",\"b\":\"O(n log n)\",\"c\":\"O(n*m)\",\"d\":\"O(n^2)\"},\"correctAnswer\":\"c\",\"explanation\":\"The LCS problem with DP uses a 2D table where n and m are lengths of two sequences. Each cell is filled once, resulting in O(n*m) time complexity. This is a fundamental DP pattern.\",\"difficulty\":\"hard\",\"topic\":\"Dynamic Programming - LCS\",\"youtubeLink\":\"https://www.youtube.com/watch?v=example\"},{\"question\":\"In the 0/1 Knapsack problem, what does dp[i][w] represent in the DP table?\",\"options\":{\"a\":\"Total weight at position i\",\"b\":\"Maximum value using first i items with capacity w\",\"c\":\"Number of items selected\",\"d\":\"Minimum weight needed\"},\"correctAnswer\":\"b\",\"explanation\":\"In 0/1 Knapsack DP, dp[i][w] stores the maximum value achievable using the first i items with knapsack capacity w. This is the core state definition in Knapsack DP.\",\"difficulty\":\"hard\",\"topic\":\"Dynamic Programming - Knapsack\",\"youtubeLink\":\"https://www.youtube.com/watch?v=example\"}]"}
